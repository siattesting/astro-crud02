---
import Layout from '../../layouts/Layout.astro'
const locals = Astro.locals
// Redirect the user if not authenticated
const session = await locals.pb.authStore.isValid
if(!session) return Astro.redirect("/auth/login")

// Form submission
const errors = { title: "", content: "", amount: "", type: "", date_operation: ""}

if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const title = data.get("title").trim();
        const content = data.get("content");
        const amount = Number(data.get("amount"));
        const type = data.get("type").trim();
        const date_operation = data.get("date");
        const author = await locals.pb.authStore.model.id;
        // Validation
        if (typeof title !== "string" || title.length < 3) {
            errors.title += "Please enter a title of at least 3 characters"
        }
        if (typeof content !== "string" || content.length < 3) {
            errors.content += "Please enter a description of at least 3 characters"
        }
        if (typeof amount !== "number" ) {
            errors.amount += "Please enter a valid amount, not equal to zero"
        }
        // Do something with the data
        const hasErrors = Object.values(errors).some(msg => msg)
        if (!hasErrors) {
            
                const newTransaction = {
                    title, content, amount, type, date_operation, author
                }
                await locals.pb.collection("transactions").create(newTransaction)
                return Astro.redirect('/transactions')
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
        console.log(error)
    }
}
---

<Layout>
    <!-- <div>
        <h2>Create Form</h2>
        <form method="POST">
            <label for="title">
                <span>Title</span>
                <input type="text" placeholder="Title" name="title" required />
            </label>
            {errors.title && <small class="error">{errors.title}</small>}
            <label for="text">
                <span>Description</span>
                <textarea placeholder="Description" name="text" required  rows={5}/>
            </label>
            {errors.text && <small class="error">{errors.text}</small>}
            <label for="amount">
                <span>Amount</span>
                    <input type="number"  name="amount" required  />
                    {errors.amount && <small class="error">{errors.amount}</small>}
                
            </label>
            
            <label for="type">
                <span>Type</span>
                <select name="type">
                    {["RECETTES", "DEPENSES"].map(type => <option>{type}</option> )}
                </select>
            </label>
            <label for="date">
                <span>Date</span>
                <input type="date" name="date" required />
            </label>
            <button type="submit" class="label" >Save</button>
        </form>
    </div> -->

    <div class="news-form">
        <p>Add your transactions</p>
        <hr />
        <form method="POST">
          <label for="title">Title</label>
          <input type="text" name="title" id="title" placeholder="Title" />
          <label for="content">Description</label>
          <textarea name="content" id="content"  placeholder="Description"/>
          <label for="amount">Amount</label>
          <input type="number" name="amount" id="amount" />
          <label for="date">Date</label>
          <input type="date" name="date" id="date" />
          <label for="type">Type de flux</label>
          <select name="type" id="type">
            {["DEPENSES", "RECETTES"].map(type => <option>{type}</option>)}
          </select>
          <button type="submit">Save</button>
        </form>
      </div>
</Layout>

<style is:global>
    form {
        display: grid;
        grid-template-columns: max-content 1fr auto;
        gap: 1em;
        margin-bottom: 1em;
        width: 60%;
    }
    label {
        grid-column: span 2;
        display: grid;
        grid: inherit;
        gap: inherit;
        grid-template-columns: subgrid;        
    }
    .error {
        color: red;
    }

    main {
      margin: auto;
      padding: 1.5rem;
      max-width: 60ch;
    }
    h1 {
      font-size: 3rem;
      font-weight: 800;
      margin: 0;
    }
    hr, p {
      margin: 5px 0;
    }
    label {
      font-size: 0.875rem;
      font-style: italic;
    }
    input, select {
      width: 100%;
      padding: 5px;
      margin: 0 0 5px 0;
      display: inline-block;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
    }
    button {
      cursor: pointer;
      margin: 10px 0 0 0;
      padding: 10px;
      font-weight: bold;
      color: #fff;
      background-image: var(--accent-gradient);
      background-size: 400%;
      background-position: 0%;
      border: none;
      border-radius: 4px;
    }
    button:hover {
      background-position: 10%;
    }
    .text-gradient {
      background-image: var(--accent-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-size: 400%;
      background-position: 0%;
    }
    .news-form {
      line-height: 1.6;
      margin: 1rem 0;
      border: 1px solid rgba(var(--accent), 25%);
      background-color: white;
      padding: 1rem;
      border-radius: 0.4rem;
    }
    .news-form code {
      font-size: 0.875em;
      font-weight: bold;
      background: rgba(var(--accent), 12%);
      color: rgb(var(--accent));
      border-radius: 4px;
      padding: 0.3em 0.45em;
    }
    .news-form strong {
      color: rgb(var(--accent));
    }
</style>