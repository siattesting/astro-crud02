---
import Layout from '../../layouts/Layout.astro'
const locals = Astro.locals
// Redirect the user if not authenticated
const session = await locals.pb.authStore.isValid
if(!session) return Astro.redirect("/auth/login")

// Form submission
const errors = { title: "", text: "", amount: "", type: "", date_operation: ""}

if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const title = data.get("title").trim();
        const text = data.get("text");
        const amount = Number(data.get("amount"));
        const type = data.get("type").trim();
        const date_operation = Date(data.get("date"));
        const author = await locals.pb.authStore.model.id;
        // Validation
        if (typeof title !== "string" || title.length < 3) {
            errors.title += "Please enter a title of at least 3 characters"
        }
        if (typeof text !== "string" || text.length < 3) {
            errors.text += "Please enter a description of at least 3 characters"
        }
        if (typeof amount !== "number" ) {
            errors.amount += "Please enter a valid amount, not equal to zero"
        }
        // Do something with the data
        const hasErrors = Object.values(errors).some(msg => msg)
        if (!hasErrors) {
            
                const newTransaction = {
                    title, text, amount, type, date_operation, author
                }
                await locals.pb.collection("transactions").create(newTransaction)
                return Astro.redirect('/transactions')
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
        console.log(error)
    }
}
---

<Layout>
    <div>
        <h2>Create Form</h2>
        <form method="POST">
            <label for="title">
                <span>Title</span>
                <input type="text" placeholder="Title" name="title" required />
            </label>
            {errors.title && <small class="error">{errors.title}</small>}
            <label for="text">
                <span>Description</span>
                <textarea placeholder="Description" name="text" required  rows={5}/>
            </label>
            {errors.text && <small class="error">{errors.text}</small>}
            <label for="amount">
                <span>Amount</span>
                    <input type="number"  name="amount" required  />
                    {errors.amount && <small class="error">{errors.amount}</small>}
                
            </label>
            
            <label for="type">
                <span>Type</span>
                <select name="type">
                    {["RECETTES", "DEPENSES"].map(type => <option>{type}</option> )}
                </select>
            </label>
            <label for="date">
                <span>Date</span>
                <input type="date" name="date" required />
            </label>
            <button type="submit" class="label" >Save</button>
        </form>
    </div>
</Layout>

<style>
    form {
        display: grid;
        grid-template-columns: max-content 1fr auto;
        gap: 1em;
        margin-bottom: 1em;
        width: 60%;
    }
    label {
        grid-column: span 2;
        display: grid;
        grid: inherit;
        gap: inherit;
        grid-template-columns: subgrid;        
    }
    .error {
        color: red;
    }
</style>