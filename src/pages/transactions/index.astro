---
import TransactionsPage from "../../components/transactions/TransactionsPage"
import TransactionCard from "../../components/transactions/TransactionCard.astro"

import Layout from "../../layouts/Layout.astro"
const locals = Astro.locals
const transactions = await locals.pb.collection('transactions').getFullList()

// Process from submission if required
const errors = { title: "", text: "", amount: "", type: "", date_operation: ""}
let editing = true;
if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const title = data.get("title").trim();
        const text = data.get("text");
        const amount = Number(data.get("amount"));
        const type = data.get("type").trim();
        const date_operation = Date(data.get("date"));
        const author = await locals.pb.authStore.model.id;
        // Validation
        if (typeof title !== "string" || title.length < 3) {
            errors.title += "Please enter a title of at least 3 characters"
        }
        if (typeof text !== "string" || text.length < 3) {
            errors.text += "Please enter a description of at least 3 characters"
        }
        if (typeof amount !== "number" ) {
            errors.amount += "Please enter a valid amount, not equal to zero"
        }
        // Do something with the data
        const hasErrors = Object.values(errors).some(msg => msg)
        if (!hasErrors) {
            
                const newTransaction = {
                    title, text, amount, type, date_operation, author
                }
                await locals.pb.collection("transactions").create(newTransaction)
                editing = false
                return Astro.redirect('/transactions')
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
        console.log(error)
    }
}
---
<!-- 
<Layout>
    <TransactionsPage client:load />
</Layout> -->

<Layout>
    <main>
      <h1>Transactions</h1>
    
      <a href="/transactions/create">Create</a>
        <div class="link-card-grid">
            {transactions && transactions.map(transaction => (
                <TransactionCard { ...transaction} />
            ))}
        </div>
    </main>
</Layout>


<style>
    main {
      margin: auto;
      padding: 1.5rem;
      max-width: 60ch;
    }
    h1 {
      font-size: 3rem;
      font-weight: 800;
      margin: 0;
    }
    hr, p {
      margin: 5px 0;
    }
    label {
      font-size: 0.875rem;
      font-style: italic;
    }
    input, select {
      width: 100%;
      padding: 5px;
      margin: 0 0 5px 0;
      display: inline-block;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
    }
    button {
      cursor: pointer;
      margin: 10px 0 0 0;
      padding: 10px;
      font-weight: bold;
      color: #fff;
      background-image: var(--accent-gradient);
      background-size: 400%;
      background-position: 0%;
      border: none;
      border-radius: 4px;
    }
    button:hover {
      background-position: 10%;
    }
    .text-gradient {
      background-image: var(--accent-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-size: 400%;
      background-position: 0%;
    }
    .news-form {
      line-height: 1.6;
      margin: 1rem 0;
      border: 1px solid rgba(var(--accent), 25%);
      background-color: white;
      padding: 1rem;
      border-radius: 0.4rem;
    }
    .news-form code {
      font-size: 0.875em;
      font-weight: bold;
      background: rgba(var(--accent), 12%);
      color: rgb(var(--accent));
      border-radius: 4px;
      padding: 0.3em 0.45em;
    }
    .news-form strong {
      color: rgb(var(--accent));
    }
    .link-card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
      gap: 1rem;
      padding: 0;
      margin: 0;
    }
    </style>